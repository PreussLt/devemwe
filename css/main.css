/*
   HTML und BODY sollen den gesamten Viewport einnehmen.
*/
html, body {
    margin: 0;
    padding: 0;
    height: 100%;
}

body {
    /* Hintergundbild, füllt die Seite */
    background: url("https://mediapool.hm.edu/media/dachmarke/dm_transfer/importueberarbeitet/geb_ude_1/lothstra_e_1/dm_roter_wuerfel_ben_steinig.jpg")
    no-repeat center center fixed;
    background-size: cover;
    font-family: sans-serif;
}

/*
   Container für die 5 Kreise,
   füllt den Bildschirm und zentriert die Kreise.
*/
.circle-container {
    position: absolute;
    width: 100vw;
    height: 100vh;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
}

/*
   Basis-Stil für alle Kreise:
   - Kreise sind 150x150px
   - Abgerundete Ecken => Kreisform
   - overflow: hidden => das Bild wird kreisförmig beschnitten
   - transform: translate(-50%, -50%) => absolutes Zentrieren
*/
.circle {
    position: absolute;
    top: 0;
    left: 0;
    width: 300px;
    height: 300px;
    border-radius: 50%;
    overflow: hidden;
    transform: translate(-50%, -50%);

    /* position: relative für Overlay und Text */
    position: relative;
}

/*
   Jeder Kreis bekommt ein Link mit einem Bild.
   Das Bild füllt den Kreis aus (object-fit: cover).
   Kleiner weißer Rand um das Bild.
   + Transition für spätere Spiegelung.
*/
.circle a {
    display: block;
    width: 100%;
    height: 100%;
    text-decoration: none;
    position: relative;
}

/* Das Bild mit Übergang für die Spiegelung */
.circle a img {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    border: 3px solid #fff;
    box-sizing: border-box;
    border-radius: 50%;
    transition: transform 0.5s ease; /* Weiche Spiegelung */
}

/* Text im Kreis */
.circle a .circle-text {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #fff;
    font-size: 0.9rem;
    font-weight: bold;
    text-align: center;
    z-index: 2; /* Sicherstellen, dass der Text über dem Overlay liegt */
    pointer-events: none; /* Text ist nicht klickbar */
}

/*
   Pseudo-Element für schwarze Overlay bei Hover:
   - ::before deckt den Kreis ab
   - Anfangs unsichtbar, auf Hover halbtransparent schwarz
*/
.circle::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.0);    /* Anfang: unsichtbar */
    transition: background 0.5s ease; /* Weicher Übergang */
    pointer-events: none;             /* Maus ignoriert das Overlay */
}

/*
   Hover-Effekte:
   1. Bild wird horizontal gespiegelt
   2. Overlay wird halbtransparent schwarz
*/
.circle:hover a img {
    transform: scaleX(-1); /* Horizontale Spiegelung */
}

.circle:hover::before {
    background: rgba(0, 0, 0, 0.5);
}

.circle::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background: rgba(0, 0, 0, 0.0);    /* Anfang: unsichtbar */
    transition: background 0.5s ease; /* Weicher Übergang */
    pointer-events: none;             /* Maus ignoriert das Overlay */
}

/*
   Pseudo-Element für den Namen (Tooltip):
   - ::after zeigt data-name an
   - Standardmäßig unsichtbar
*/
.circle[data-name]::after {
    content: attr(data-name);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: #fff;
    font-size: 0.9rem;
    font-weight: bold;
    opacity: 0;              /* Versteckt */
    transition: opacity 0.5s ease;
    pointer-events: none;    /* Tooltip soll die Maus nicht blocken */
}

/*
   Wenn man mit der Maus über den Kreis geht:
   1. Bild wird horizontal gespiegelt
   2. Overlay wird halbtransparent schwarz
   3. Name wird eingeblendet
*/
.circle:hover a img {
    transform: scaleX(-1); /* Horizontale Spiegelung */
}

.circle:hover::before {
    background: rgba(0, 0, 0, 0.5);
}

.circle[data-name]:hover::after {
    opacity: 1;
}

/*
   Anordnung der Kreise in einem unsichtbaren Kreis
   - transform: rotate(...) + translate(...) + rotate(...)
   - 5 Kreise => 72° Abstand pro Kreis
*/
.circle-1 {
    position: fixed;
    top: 20%;
    left: 50%;
}

.circle-2 {
    position: fixed;
    top: 45%;
    left: 30%;
}

.circle-3 {
    position: fixed;
    top: 45%;
    left: 70%;
}

.circle-4 {
    position: fixed;
    top: 80%;
    left: 40%;
}

.circle-5 {
    position: fixed;
    top: 80%;
    left: 60%;
}
